<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="qnaMapper">

	<insert id="write">
		INSERT INTO KNOWLEDGE_QUESTION
		(
		    NO
		    , WRITER
		    , CATE_NO
		    , TITLE
		    , CONTENT
		    , ENROLL_DATE
		    , DELETE_YN
		    , MODIFY_DATE
		    , HIT
		)
		VALUES
		(
		    SEQ_KNOWLEDGE_QUESTION_NO.NEXTVAL
		    , #{writer}
		    , #{cateNo}
		    , #{title}
		    , #{content}
		    , SYSDATE
		    , 'N'
		    , SYSDATE
		    , '0'
		)
	</insert>
	
	<insert id="insertTag">
		INSERT INTO TAG (NO, NAME)
		SELECT SEQ_TAG_NO.NEXTVAL, A FROM
		(
		<foreach collection="array" item="arr" separator="UNION ALL">
		SELECT #{arr} AS A FROM DUAL WHERE NOT EXISTS (SELECT NAME FROM TAG WHERE NAME = #{arr})
		</foreach>
		)
	</insert>
	
	<insert id="insertKnowledgeTag">
		INSERT INTO KNOWLEDGE_TAG (A_NO, TAG_NO)
		SELECT (SELECT NO FROM KNOWLEDGE_QUESTION ORDER BY NO DESC OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY), A FROM
		(
		<foreach collection="array" item="arr" separator="UNION ALL">
		    SELECT (SELECT NO FROM TAG WHERE NAME = #{arr}) AS A FROM DUAL
    	</foreach>
		)
	</insert>
	
	<select id="selectList" resultType="map">
		SELECT K.NO, C.NAME AS CATE_NO, K.TITLE, TO_CHAR(K.CONTENT) CONTENT, M.NICK AS WRITER, K.HIT, TO_CHAR(CAST(K.ENROLL_DATE as DATE),'YYYY.MM.DD') ENROLL_DATE, M.IMG_PATH, NVL(REPLY_CNT,0) REPLY_CNT, NVL(LIKES,0) LIKES FROM KNOWLEDGE_QUESTION K
		JOIN MEMBER M ON K.WRITER = M.NO
		JOIN KNOWLEDGE_CATEGORY C ON K.CATE_NO = C.NO
		LEFT JOIN (SELECT Q_NO, COUNT(*) REPLY_CNT FROM KNOWLEDGE_ANSWER WHERE DELETE_YN = 'N' GROUP BY Q_NO) A ON K.NO = A.Q_NO
		LEFT JOIN (SELECT NO, SUM(CASE WHEN STATUS = 'L' THEN 1 ELSE 0 END) AS LIKES FROM KNOWLEDGE_LIKE_HATE GROUP BY NO) L ON K.NO = L.NO
		WHERE K.DELETE_YN = 'N'
		<if test="keyword != null">AND (K.TITLE LIKE '%${keyword}%' OR K.CONTENT LIKE '%${keyword}%')</if>
		ORDER BY K.NO DESC
	</select>
	
	<select id="detail" resultType="com.learntime.app.qna.vo.QnaVo">
		SELECT K.NO, K.TITLE, C.NAME AS CATE_NO, K.CONTENT, M.NICK AS WRITER, M.IMG_PATH, TO_CHAR(CAST(K.ENROLL_DATE as DATE),'YYYY.MM.DD')ENROLL_DATE, K.HIT, NVL(SCRAP_CNT,0) SCRAP_CNT, NVL(LIKES,0) LIKES, NVL(HATES,0) HATES, NVL(REPLY_CNT,0) REPLY_CNT
		FROM KNOWLEDGE_QUESTION K
		JOIN MEMBER M ON K.WRITER = M.NO
		JOIN KNOWLEDGE_CATEGORY C ON K.CATE_NO = C.NO
		LEFT JOIN (SELECT Q_NO, COUNT(*) SCRAP_CNT FROM KNOWLEDGE_SCRAP GROUP BY Q_NO) S ON K.NO = S.Q_NO
		LEFT JOIN (SELECT Q_NO, COUNT(*) REPLY_CNT FROM KNOWLEDGE_ANSWER WHERE DELETE_YN = 'N' GROUP BY Q_NO) A ON K.NO = A.Q_NO
		LEFT JOIN (SELECT NO, SUM(CASE WHEN STATUS = 'L' THEN 1 ELSE 0 END) AS LIKES, SUM(CASE WHEN STATUS = 'H' THEN 1 ELSE 0 END) AS HATES FROM KNOWLEDGE_LIKE_HATE GROUP BY NO) L ON K.NO = L.NO
		WHERE K.NO = #{no}
	</select>
	
	<update id="edit">
		UPDATE KNOWLEDGE_QUESTION SET
		CATE_NO = #{cateNo}
		, TITLE = #{title}
		, CONTENT = #{content}
		, MODIFY_DATE = SYSDATE
		WHERE NO = #{no}
	</update>
	
	<update id="updateHit">
		UPDATE KNOWLEDGE_QUESTION SET
		HIT = HIT + 1
		WHERE NO = #{no}
	</update>
	
	<update id="delete">
		UPDATE KNOWLEDGE_QUESTION SET
		DELETE_YN = 'Y'
		WHERE NO = #{qno}
	</update>
	
	
</mapper>