<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="studyMapper">
	<insert id="insertGroupInfo">
		INSERT INTO RECRUIT_GROUP
		(
			NO
			, WRITER
			, G_TYPE_NO
			, G_WAY_NO
			, G_PERIOD_NO
			, NUMBER_PEOPLE
			, TECH_STACK_NO
			, START_DATE
			, START_TIME
			, END_TIME
			, TITLE
			, INTRO
			, PLACE
			, ADDRESS
			, HIT
			, NAME
			, IMG_PATH
			, CLOSING_YN
			, DELETE_YN
			, MODIFY_DATE
			, ENROLL_DATE
		)
		VALUES
		(
			SEQ_RECRUIT_GROUP_NO.NEXTVAL
			, #{writer}
			, #{gTypeNo}
			, #{gWayNo}
			, #{gPeriodNo}
			, #{numberPeople}
			, #{techStackNoList}
			, #{startDate}
			, #{startTime}
			, #{endTime}
			, #{title}
			, #{intro}
			, #{place}
			, #{address}
			, '0'
			, '${writerNick}님의 스터디'
			, null
			, 'N'
			, 'N'
			, SYSDATE
			, SYSDATE

		)
	</insert>
	<insert id="insertGroupQuestion">
		INSERT INTO RECRUIT_QUESTION (NO, G_NO, QUESTION, DELETE_YN, MODIFY_DATE)
		    SELECT SEQ_RECRUIT_QUESTION_NO.NEXTVAL, A, B, C, D FROM 
		    (
		    <foreach collection="array" item="arr" separator="UNION ALL">
		    	SELECT (SELECT NO FROM RECRUIT_GROUP ORDER BY NO DESC OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY) AS A, #{arr} AS B,'N' AS C,SYSDATE AS D FROM DUAL
		    </foreach>
		    )
	</insert>
	
	<insert id="insertGroupTechStack">
		INSERT INTO GROUP_TECH_STACK (G_NO, TECH_STACK_NO)
		    SELECT A, B FROM 
		    (
		    <foreach collection="array" item="arr" separator="UNION ALL">
		    	SELECT (SELECT NO FROM RECRUIT_GROUP ORDER BY NO DESC OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY) AS A, #{arr} AS B FROM DUAL
		    </foreach>
		    )
	</insert>
	
	<insert id="insertCommonTag">
		INSERT INTO TAG (NO, NAME)
			SELECT SEQ_TAG_NO.NEXTVAL, A FROM
		    (
		    <foreach collection="array" item="arr" separator="UNION ALL">
		    	SELECT #{arr} AS A FROM DUAL WHERE NOT EXISTS (SELECT NAME FROM TAG WHERE NAME = #{arr})
		    </foreach>
		    )
	</insert>
	
	<insert id="insertGroupTag">
		INSERT INTO GROUP_TAG (GROUP_NO, TAG_NO)
			SELECT (SELECT NO FROM RECRUIT_GROUP ORDER BY NO DESC OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY), A FROM
		    (
		    <foreach collection="array" item="arr" separator="UNION ALL">
		    	SELECT (SELECT NO FROM TAG WHERE NAME = #{arr}) AS A FROM DUAL
		    </foreach>
		    )
	</insert>
	
	<select id="selectMyGroupList" resultType="map">
		SELECT G.NO, G.DELETE_YN, G.NAME, G.IMG_PATH, L.STATUS
		FROM RECRUIT_LIST L
		JOIN RECRUIT_GROUP G ON L.G_NO = G.NO
		WHERE L.M_NO = #{no} 
		AND G.DELETE_YN = 'N'
		AND (L.STATUS IN ('B', 'C'))
	</select>
	
	<select id="selectPopularTagList" resultType="map">
		SELECT T.NO, T.NAME, COUNT(T.NO) CNT
		FROM GROUP_TAG G
		JOIN TAG T ON G.TAG_NO = T.NO
		GROUP BY (T.NO, T.NAME)
		ORDER BY CNT DESC FETCH NEXT 10 ROWS ONLY
	</select>
	
	<select id="selectPopularTechStackList" resultType="map">
		SELECT T.NO, T.NAME, T.IMG_PATH, COUNT(T.NO) CNT
		FROM GROUP_TECH_STACK G
		JOIN TECH_STACK T ON G.TECH_STACK_NO = T.NO
		GROUP BY (T.NO, T.NAME, T.IMG_PATH)
		ORDER BY CNT DESC FETCH NEXT 10 ROWS ONLY
	</select>
	
	<select id="selectGroupTypeList" resultType="map">
		SELECT NO, NAME
		FROM GROUP_TYPE
	</select>
	
	<select id="selectGroupPeriodList" resultType="map">
		SELECT NO, NAME
		FROM GROUP_PERIOD
	</select>
	
	<select id="selectTechStackList" resultType="map">
		SELECT NO, NAME
		FROM TECH_STACK
	</select>
	
	<select id="selectTechStackListByType" resultType="map">
		<choose>
		    <when test="type.equals('인기')">
		      	SELECT T.NO, T.NAME, T.IMG_PATH, COUNT(T.NO) CNT
				FROM GROUP_TECH_STACK G
				JOIN TECH_STACK T ON G.TECH_STACK_NO = T.NO
				GROUP BY (T.NO, T.NAME, T.IMG_PATH)
				ORDER BY CNT DESC FETCH NEXT 10 ROWS ONLY
		    </when>
		    <when test="type.equals('모두보기')">
		        SELECT NO, NAME, IMG_PATH
				FROM TECH_STACK
		    </when>
		    <otherwise>
		      	SELECT A.NO, A.TYPE_NO, A.NAME, A.IMG_PATH, B.NAME
				FROM TECH_STACK A
				JOIN TECH_STACK_TYPE B ON A.TYPE_NO = B.NO
				WHERE B.NAME = #{type}
				ORDER BY A.NO
		    </otherwise>
		</choose>
	</select>
	
	<select id="selectGroupList" resultType="map">
		SELECT DISTINCT(G.NO), TO_CHAR(CAST(START_DATE as DATE),'YYYY.MM.DD') START_DATE, TITLE, TO_CHAR(G.INTRO) INTRO, HIT, T.NAME TYPE, W.NAME WAY, NUMBER_PEOPLE, P.NAME PERIOD, M.NICK, M.IMG_PATH, G.ENROLL_DATE, G.CLOSING_YN, NVL(CMT_CNT,0) CMT_CNT , NVL(SCRAP_CNT,0) SCRAP_CNT, NVL(LIKES-HATES,0) LIKE_CNT
		FROM RECRUIT_GROUP G
		JOIN GROUP_TYPE T ON G.G_TYPE_NO = T.NO
		JOIN GROUP_WAY W ON G.G_WAY_NO = W.NO
		JOIN GROUP_PERIOD P ON G.G_PERIOD_NO = P.NO
		JOIN MEMBER M ON G.WRITER = M.NO
		LEFT JOIN (SELECT G_NO, COUNT(*) CMT_CNT FROM GROUP_CMT WHERE DELETE_YN = 'N' GROUP BY G_NO) C ON C.G_NO = G.NO
		LEFT JOIN (SELECT G_NO, COUNT(*) SCRAP_CNT FROM GROUP_SCRAP GROUP BY G_NO) S ON S.G_NO = G.NO
		LEFT JOIN ( SELECT  G_NO, SUM(CASE WHEN STATUS = 'L' THEN 1 ELSE 0 END) AS LIKES, SUM(CASE WHEN STATUS = 'H' THEN 1 ELSE 0 END) AS HATES
		        FROM GROUP_LIKE_HATE
		        GROUP BY G_NO) L ON L.G_NO = G.NO
		WHERE G.DELETE_YN = 'N' 	
		<if test="keyword != null">AND (G.TITLE LIKE '%${keyword}%' OR G.INTRO LIKE '%${keyword}%')</if>
		<if test="!'전체'.equals(type)">AND T.NAME = #{type}</if>
		<if test="'open'.equals(status)">AND G.CLOSING_YN = 'N'</if>
		<if test="tag != null or ''.equals(tag)">
			AND G.NO IN (SELECT GROUP_NO
			FROM GROUP_TAG
			JOIN TAG ON GROUP_TAG.TAG_NO = TAG.NO
			WHERE TAG.NAME IN 
			<foreach item="item" index="index" collection="tag"
			    open="(" separator="," close=")">
			      #{item}
			</foreach>
			)
		</if>
		<if test="techStack != null or ''.equals(techStack)">
			AND G.NO IN (SELECT G_NO
			FROM GROUP_TECH_STACK G
			JOIN TECH_STACK T ON G.TECH_STACK_NO = T.NO
			WHERE T.NAME IN 
				<foreach item="item" index="index" collection="techStack"
			    	open="(" separator="," close=")">
			      	#{item}
				</foreach>
			)
		</if>
		<if test="'recent'.equals(order)">ORDER BY ENROLL_DATE DESC</if>
		<if test="'hit'.equals(order)">ORDER BY G.HIT DESC</if>
		<if test="'recommend'.equals(order)">ORDER BY LIKE_CNT DESC</if>
		<if test="'scrap'.equals(order)">ORDER BY SCRAP_CNT DESC</if>
		<if test="'comment'.equals(order)">ORDER BY CMT_CNT DESC</if>
	</select>
	
	<select id="selectTechStackListByGno" resultType="map">
		SELECT T.NO, T.NAME, T.IMG_PATH
		FROM GROUP_TECH_STACK G
		JOIN TECH_STACK T ON G.TECH_STACK_NO = T.NO
		WHERE G_NO = #{gno}
	</select>
	
	<select id="selectScrapCntByGno" resultType="map">
		SELECT COUNT(*) CNT
		FROM GROUP_SCRAP
		WHERE G_NO = #{gno}
	</select>
	
	<select id="selectCmtCntByGno" resultType="map">
		SELECT COUNT(*) CNT
		FROM GROUP_CMT
		WHERE G_NO = #{gno}
		AND DELETE_YN = 'N'
	</select>
	
	<select id="selectlikeHateCntByGno" resultType="map">
		SELECT 
		(SELECT COUNT(*)
		FROM GROUP_LIKE_HATE
		WHERE G_NO = #{gno}
		AND STATUS = 'L') 
		- 
		(SELECT COUNT(*)
		FROM GROUP_LIKE_HATE
		WHERE G_NO = #{gno}
		AND STATUS = 'H') AS CNT
		FROM DUAL
	</select>
	<select id="selectGroupOneByGno" resultType="map">
		SELECT DISTINCT(G.NO) NO, G.NAME GROUP_NAME, G.IMG_PATH GROUP_IMG_PATH, START_TIME, END_TIME,PLACE, ADDRESS, TO_CHAR(CAST(START_DATE as DATE),'YYYY.MM.DD') START_DATE, TITLE, TO_CHAR(G.INTRO) INTRO, HIT, T.NAME TYPE, T.NO TYPE_NO, W.NAME WAY, W.NO WAY_NO, NUMBER_PEOPLE, P.NAME PERIOD,P.NO PERIOD_NO, M.NO WRITER_NO, M.NICK, M.IMG_PATH, TO_CHAR(CAST(G.ENROLL_DATE as DATE),'YYYY.MM.DD HH24:MI') ENROLL_DATE, G.CLOSING_YN, NVL(CMT_CNT,0) CMT_CNT , NVL(SCRAP_CNT,0) SCRAP_CNT, NVL(LIKES-HATES,0) LIKE_CNT, G.TECH_STACK_NO
		FROM RECRUIT_GROUP G
		JOIN GROUP_TYPE T ON G.G_TYPE_NO = T.NO
		JOIN GROUP_WAY W ON G.G_WAY_NO = W.NO
		JOIN GROUP_PERIOD P ON G.G_PERIOD_NO = P.NO
		JOIN MEMBER M ON G.WRITER = M.NO
		LEFT JOIN (SELECT G_NO, COUNT(*) CMT_CNT FROM GROUP_CMT WHERE DELETE_YN = 'N' GROUP BY G_NO) C ON C.G_NO = G.NO
		LEFT JOIN (SELECT G_NO, COUNT(*) SCRAP_CNT FROM GROUP_SCRAP GROUP BY G_NO) S ON S.G_NO = G.NO
		LEFT JOIN ( SELECT  G_NO, SUM(CASE WHEN STATUS = 'L' THEN 1 ELSE 0 END) AS LIKES, SUM(CASE WHEN STATUS = 'H' THEN 1 ELSE 0 END) AS HATES
		        FROM GROUP_LIKE_HATE
		        GROUP BY G_NO) L ON L.G_NO = G.NO
		WHERE G.DELETE_YN = 'N' 
		AND G.NO = #{gno}
	</select>
	<select id="selectQuestionListByGno" resultType="map">
		SELECT NO, QUESTION
		FROM RECRUIT_QUESTION
		WHERE G_NO = #{gno}
		AND DELETE_YN = 'N'
		ORDER BY NO
	</select>
	<select id="selectTagListByGno" resultType="map">
		SELECT NO, NAME
		FROM GROUP_TAG G
		JOIN TAG T ON G.TAG_NO = T.NO
		WHERE G.GROUP_NO = #{gno}
	</select>
	<select id="selectMemberListByGno" resultType="map">
		SELECT M.NICK, M.IMG_PATH, L.STATUS
		FROM RECRUIT_LIST L
		JOIN MEMBER M ON L.M_NO = M.NO
		WHERE L.G_NO = #{gno}
		AND L.STATUS IN ('B','C')
	</select>
	<update id="updateHit">
		UPDATE RECRUIT_GROUP
		SET HIT = HIT + 1
		WHERE NO = #{gno}
	</update>
	<insert id="insertWriter">
		INSERT INTO RECRUIT_LIST
		(NO, G_NO, M_NO, ENROLL_DATE, STATUS)
		VALUES 
		(SEQ_RECRUIT_LIST_NO.NEXTVAL, (SELECT NO FROM RECRUIT_GROUP ORDER BY NO DESC OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY), #{writer}, SYSDATE, 'B')
	</insert>
	
	<select id="selectLikeHateByMno" resultType="String">
		SELECT STATUS 
		FROM GROUP_LIKE_HATE
		WHERE M_NO = #{mno}
		AND G_NO = #{gno}
	</select>
	
	<select id="selectScrapYn" resultType="String">
		SELECT M_NO SCRAP_YN
		FROM GROUP_SCRAP
		WHERE M_NO = #{mno}
		AND G_NO = #{gno}
	</select>
	
	<update id="deleteGroup">
		UPDATE RECRUIT_GROUP 
		SET DELETE_YN = 'Y'
		WHERE NO = #{gno}
	</update>
	
	<update id="deleteGroupQuestion">
		UPDATE RECRUIT_QUESTION
		SET DELETE_YN = 'Y'
		WHERE G_NO = #{gno}
	</update>
	<update id="deleteGroupTechStack">
		DELETE FROM GROUP_TECH_STACK
		WHERE G_NO = #{gno}
	</update>
	<update id="deleteGroupTag">
		DELETE FROM GROUP_TAG
		WHERE GROUP_NO = #{gno}
	</update>
	
	<update id="editGroup">
		UPDATE RECRUIT_GROUP
		SET G_TYPE_NO = #{gTypeNo} ,
		G_WAY_NO = #{gWayNo} ,
		G_PERIOD_NO = #{gPeriodNo} ,
		NUMBER_PEOPLE = #{numberPeople} , 
		TECH_STACK_NO = #{techStackNoList} ,
		START_DATE = #{startDate} ,
		START_TIME = #{startTime} ,
		END_TIME = #{endTime} ,
		TITLE = #{title} ,
		INTRO = #{intro} , 
		PLACE = #{place} , 
		ADDRESS = #{address} , 
		MODIFY_DATE = SYSDATE
		WHERE NO = #{no}
	</update>
	<insert id="insertGroupMember">
		INSERT INTO RECRUIT_LIST
		(NO, G_NO, M_NO, ENROLL_DATE, STATUS)
		VALUES (SEQ_RECRUIT_LIST_NO.NEXTVAL, #{gno}, #{mno}, SYSDATE, 'A')
	</insert>
	<update id="updateGroupProfile">
		UPDATE RECRUIT_GROUP SET
		NAME = #{name} ,
		IMG_PATH = #{changeName}
		WHERE NO = #{no}
		
	</update>
	<select id="selectGroupMemberListByStatus" resultType="map">
		SELECT R.NO, R.G_NO, R.M_NO,  TO_CHAR(CAST(R.ENROLL_DATE as DATE),'YYYY.MM.DD HH24:mm:ss') ENROLL_DATE, R.STATUS, M.IMG_PATH MEMBER_PROFILE, M.NICK MEMBER_NICK 
		FROM RECRUIT_LIST R
		JOIN MEMBER M ON R.M_NO = M.NO
		WHERE R.G_NO = #{gno}
		AND R.STATUS = #{status}
	</select>
	<select id="selectAnswerListByNo" resultType="map">
		SELECT L.NO, M.NICK, Q.QUESTION, R.CONTENT
		FROM RECRUIT_LIST L
		LEFT JOIN RECRUIT_REPLY R ON L.NO = R.RECRUIT_LIST_NO
		LEFT JOIN RECRUIT_QUESTION Q ON Q.NO = R.RECRUIT_QUESTION_NO
		JOIN MEMBER M ON M.NO = L.M_NO
		WHERE L.NO = #{rno}
	</select>
	<insert id="insertAnswer">
		INSERT INTO RECRUIT_REPLY
		VALUES (SEQ_RECRUIT_REPLY_NO.NEXTVAL, #{qno}, (SELECT NO RECRUIT_LIST_NO FROM RECRUIT_LIST WHERE G_NO = #{gno} AND M_NO = #{mno} AND STATUS = 'A') , #{answer})
	</insert>
	<update id="confirm">
		UPDATE RECRUIT_LIST SET
		STATUS = 'C'
		WHERE NO = #{rno}
	</update>
		<update id="reject">
		UPDATE RECRUIT_LIST SET
		STATUS = 'D'
		WHERE NO = #{rno}
	</update>
	<update id="delegate">
		UPDATE RECRUIT_LIST SET
		STATUS = 'B'
		WHERE NO = #{rno}
	</update>
	<update id="leaveRep">
		UPDATE RECRUIT_LIST SET
		STATUS = 'C'
		WHERE NO IN (SELECT NO FROM RECRUIT_LIST WHERE STATUS = 'B')
	</update>
		<update id="quit">
		UPDATE RECRUIT_LIST SET
		STATUS = 'F'
		WHERE NO = #{rno}
	</update>
	<update id="kick">
		UPDATE RECRUIT_LIST SET
		STATUS = 'E'
		WHERE NO = #{rno}
	</update>
	<insert id="addScrap">
		INSERT INTO GROUP_SCRAP
		VALUES (#{mno}, #{gno})
	</insert>
	<delete id="deleteScrap">
		DELETE FROM GROUP_SCRAP
		WHERE M_NO = #{mno} AND G_NO = #{gno}
	</delete>
	<insert id="like">
		INSERT INTO GROUP_LIKE_HATE
		VALUES (#{mno}, #{gno}, 'L')
	</insert>
	<insert id="cmtLike">
		INSERT INTO GROUP_CMT_LIKE_HATE
		VALUES (#{mno}, #{cno}, 'L')
	</insert>
	<insert id="hate">
		INSERT INTO GROUP_LIKE_HATE
		VALUES (#{mno}, #{gno}, 'H')
	</insert>
	<insert id="cmtHate">
		INSERT INTO GROUP_CMT_LIKE_HATE
		VALUES (#{mno}, #{cno}, 'H')
	</insert>
	<delete id="deleteLikeHate">
		DELETE FROM GROUP_LIKE_HATE
		WHERE M_NO = #{mno} AND G_NO = #{gno}
	</delete>
	<delete id="deleteCmtLikeHate">
		DELETE FROM GROUP_CMT_LIKE_HATE
		WHERE M_NO = #{mno} AND CMT_NO = #{cno}
	</delete>
	<insert id="writeCmt">
		INSERT INTO GROUP_CMT
		<if test="group == null">VALUES(SEQ_GROUP_CMT_NO.NEXTVAL, #{gno}, #{mno}, #{cmt}, SYSDATE, SYSDATE, 'N', '0', SEQ_GROUP_CMT_NO.NEXTVAL)</if>
		<if test="group != null">VALUES(SEQ_GROUP_CMT_NO.NEXTVAL, #{gno}, #{mno}, #{cmt}, SYSDATE, SYSDATE, 'N', '1', #{group})</if>
	</insert>
	<select id="selectGroupCmtList" resultType="map">
		SELECT C.*, LH.LIKES, LH.HATES, (NVL(LH.LIKES, 0) - NVL(LH.HATES, 0)) CMT_LIKE_CNT, M.NICK, M.IMG_PATH, TO_CHAR(C.CONTENT) CMT_CONTENT, L.STATUS
		FROM GROUP_CMT C
		LEFT JOIN MEMBER M ON C.WRITER = M.NO
		LEFT JOIN ( SELECT  CMT_NO, SUM(CASE WHEN STATUS = 'L' THEN 1 ELSE 0 END) AS LIKES, SUM(CASE WHEN STATUS = 'H' THEN 1 ELSE 0 END) AS HATES
				        FROM GROUP_CMT_LIKE_HATE
				        GROUP BY CMT_NO) LH ON LH.CMT_NO = C.NO
		LEFT JOIN RECRUIT_LIST L ON L.M_NO = C.WRITER    		        
		WHERE C.DELETE_YN = 'N' AND C.DEPTH = '0' AND C.G_NO = #{gno}
		ORDER BY C.NO
	</select>
	<select id="selectGroupCmtReplyListByCgno" resultType="map">
		SELECT C.*, LH.LIKES, LH.HATES, (NVL(LH.LIKES, 0) - NVL(LH.HATES, 0)) CMT_LIKE_CNT, M.NICK, M.IMG_PATH, TO_CHAR(C.CONTENT) CMT_CONTENT, L.STATUS
		FROM GROUP_CMT C
		LEFT JOIN MEMBER M ON C.WRITER = M.NO
		LEFT JOIN ( SELECT  CMT_NO, SUM(CASE WHEN STATUS = 'L' THEN 1 ELSE 0 END) AS LIKES, SUM(CASE WHEN STATUS = 'H' THEN 1 ELSE 0 END) AS HATES
				        FROM GROUP_CMT_LIKE_HATE
				        GROUP BY CMT_NO) LH ON LH.CMT_NO = C.NO
		LEFT JOIN RECRUIT_LIST L ON L.M_NO = C.WRITER    		        
		WHERE C.DELETE_YN = 'N' AND C.DEPTH = '1' AND C."GROUP" = #{cgno} 
		ORDER BY C.NO
	</select>
	<select id="selectCmtLikeHate" resultType="String">
		SELECT STATUS
		FROM GROUP_CMT C
		LEFT JOIN GROUP_CMT_LIKE_HATE LH ON C.NO = LH.CMT_NO
		WHERE C.DEPTH = '0' AND LH.M_NO = #{mno} AND LH.CMT_NO = #{cno}
	</select>
	<select id="selectCmtReplyLikeHate" resultType="String">
		SELECT STATUS
		FROM GROUP_CMT C
		LEFT JOIN GROUP_CMT_LIKE_HATE LH ON C.NO = LH.CMT_NO
		WHERE C.DEPTH = '1' AND LH.M_NO = #{mno} AND LH.CMT_NO = #{rcno}
	</select>
	<select id="selectMypageList" resultType="map">
		<if test="'apply'.equals(details)">
			SELECT L.G_NO, L.M_NO, TO_CHAR(CAST(L.ENROLL_DATE as DATE),'YYYY.MM.DD') ENROLL_DATE , L.STATUS, G.TITLE, G.WRITER, (SELECT M.NICK FROM RECRUIT_LIST L1 JOIN MEMBER M ON M.NO = L1.M_NO WHERE G.NO = L1.G_NO AND STATUS = 'B') REP
			FROM RECRUIT_LIST L    
			JOIN RECRUIT_GROUP G ON L.G_NO = G.NO
			WHERE L.M_NO = #{mno} 
			AND L.STATUS != 'B'
			<if test="keyword != null and !''.equals(keyword) and 'title'.equals(status)">
			AND G.TITLE LIKE '%${keyword}%'
			</if>
			<if test="keyword != null and !''.equals(keyword) and 'content'.equals(status)">
			AND G.INTRO LIKE '%${keyword}%'
			</if>
		</if>
		<if test="'participate'.equals(details)">
			SELECT L.G_NO, L.M_NO, TO_CHAR(CAST(L.ENROLL_DATE as DATE),'YYYY.MM.DD') ENROLL_DATE , L.STATUS, G.TITLE, G.WRITER, (SELECT M.NICK FROM RECRUIT_LIST L1 JOIN MEMBER M ON M.NO = L1.M_NO WHERE G.NO = L1.G_NO AND STATUS = 'B') REP
			FROM RECRUIT_LIST L    
			JOIN RECRUIT_GROUP G ON L.G_NO = G.NO
			WHERE L.M_NO = #{mno} AND L.STATUS = 'C'
			<if test="keyword != null and !''.equals(keyword) and 'title'.equals(status)">
			AND G.TITLE LIKE '%${keyword}%'
			</if>
			<if test="keyword != null and !''.equals(keyword) and 'content'.equals(status)">
			AND G.INTRO LIKE '%${keyword}%'
			</if>
		</if>
		<if test="'manage'.equals(details)">
			SELECT L.G_NO, L.M_NO, TO_CHAR(CAST(L.ENROLL_DATE as DATE),'YYYY.MM.DD') ENROLL_DATE , L.STATUS, G.TITLE, G.WRITER, (SELECT M.NICK FROM RECRUIT_LIST L1 JOIN MEMBER M ON M.NO = L1.M_NO WHERE G.NO = L1.G_NO AND STATUS = 'B') REP
			FROM RECRUIT_LIST L    
			JOIN RECRUIT_GROUP G ON L.G_NO = G.NO
			WHERE L.M_NO = #{mno} AND L.STATUS = 'B'
			<if test="keyword != null and !''.equals(keyword) and 'title'.equals(status)">
			AND G.TITLE LIKE '%${keyword}%'
			</if>
			<if test="keyword != null and !''.equals(keyword) and 'content'.equals(status)">
			AND G.INTRO LIKE '%${keyword}%'
			</if>
		</if>
		<if test="'scrap'.equals(details)">
		SELECT G.NO, T.NAME TYPE, W.NAME WAY, G.TITLE, G.CLOSING_YN, (SELECT M.NICK
                                                    FROM RECRUIT_LIST L 
                                                    JOIN MEMBER M ON L.M_NO = M.NO
                                                    WHERE G.NO = L.G_NO AND STATUS = 'B') REP
		FROM GROUP_SCRAP S
		JOIN RECRUIT_GROUP G ON S.G_NO = G.NO
		JOIN GROUP_TYPE T ON T.NO = G.G_TYPE_NO
		JOIN GROUP_WAY W ON W.NO = G.G_WAY_NO
		WHERE S.M_NO = #{mno} AND G.DELETE_YN = 'N'
		<if test="keyword != null and !''.equals(keyword) and 'title'.equals(status)">
			AND G.TITLE LIKE '%${keyword}%'
			</if>
			<if test="keyword != null and !''.equals(keyword) and 'content'.equals(status)">
			AND G.INTRO LIKE '%${keyword}%'
			</if>
		</if>
	</select>
	<select id="selectMypageCnt" resultType="int">
		<if test="'apply'.equals(details)">
			SELECT COUNT(*)
			FROM RECRUIT_LIST L    
			JOIN RECRUIT_GROUP G ON L.G_NO = G.NO
			WHERE L.M_NO = #{mno} AND L.STATUS != 'B'
			<if test="keyword != null and !''.equals(keyword) and 'title'.equals(status)">
			AND G.TITLE LIKE '%${keyword}%'
			</if>
			<if test="keyword != null and !''.equals(keyword) and 'content'.equals(status)">
			AND G.INTRO LIKE '%${keyword}%'
			</if>
		</if>
		<if test="'participate'.equals(details)">
			SELECT COUNT(*)
			FROM RECRUIT_LIST L    
			JOIN RECRUIT_GROUP G ON L.G_NO = G.NO
			WHERE L.M_NO = #{mno} AND L.STATUS = 'C'
			<if test="keyword != null and !''.equals(keyword) and 'title'.equals(status)">
			AND G.TITLE LIKE '%${keyword}%'
			</if>
			<if test="keyword != null and !''.equals(keyword) and 'content'.equals(status)">
			AND G.INTRO LIKE '%${keyword}%'
			</if>
		</if>
		<if test="'manage'.equals(details)">
			SELECT COUNT(*)
			FROM RECRUIT_LIST L    
			JOIN RECRUIT_GROUP G ON L.G_NO = G.NO
			WHERE L.M_NO = #{mno} AND L.STATUS = 'B'
			<if test="keyword != null and !''.equals(keyword) and 'title'.equals(status)">
			AND G.TITLE LIKE '%${keyword}%'
			</if>
			<if test="keyword != null and !''.equals(keyword) and 'content'.equals(status)">
			AND G.INTRO LIKE '%${keyword}%'
			</if>
		</if>
		<if test="'scrap'.equals(details)">
		SELECT COUNT(*)
		FROM GROUP_SCRAP S
		JOIN RECRUIT_GROUP G ON S.G_NO = G.NO
		JOIN GROUP_TYPE T ON T.NO = G.G_TYPE_NO
		JOIN GROUP_WAY W ON W.NO = G.G_WAY_NO
		WHERE S.M_NO = #{mno} AND G.DELETE_YN = 'N'
		<if test="keyword != null and !''.equals(keyword) and 'title'.equals(status)">
			AND G.TITLE LIKE '%${keyword}%'
			</if>
			<if test="keyword != null and !''.equals(keyword) and 'content'.equals(status)">
			AND G.INTRO LIKE '%${keyword}%'
			</if>
		</if>
	</select>
	<select id="selectMyStatus" resultType="String">
		SELECT STATUS
		FROM RECRUIT_LIST
		WHERE G_NO = #{gno} AND M_NO = #{mno}
	</select>
	<update id="open">
		UPDATE RECRUIT_GROUP SET
		CLOSING_YN = 'N'
		WHERE NO = #{gno}
	</update>
	<update id="close">
		UPDATE RECRUIT_GROUP SET
		CLOSING_YN = 'Y'
		WHERE NO = #{gno}
	</update>
	<insert id="insertGroupBoardCategory">
		INSERT INTO GROUP_BOARD_CATEGORY
		VALUES (SEQ_GROUP_BOARD_CATEGORY_NO.NEXTVAL, #{gno}, #{cateName}, 'N')
	</insert>
	<select id="selectCateList" resultType="map">
		SELECT NO, G_NO, NAME, DELETE_YN
		FROM GROUP_BOARD_CATEGORY
		WHERE G_NO = #{gno} AND DELETE_YN = 'N'
	</select>
	<select id="selectCateName" resultType="String">
		SELECT NAME
		FROM GROUP_BOARD_CATEGORY
		WHERE NO = #{ctno}
	</select>
	<select id="selectBoardList" resultType="map">
		SELECT ROWNUM, A.* FROM
		(SELECT B.NO, B.TITLE, M.NICK,TO_CHAR(CAST(B.ENROLL_DATE as DATE),'YYYY.MM.DD') ENROLL_DATE , B.HIT
		FROM GROUP_BOARD B
		JOIN GROUP_BOARD_CATEGORY C ON B.CATE_NO = C.NO
		JOIN MEMBER M ON M.NO = B.WRITER
		WHERE B.CATE_NO = #{ctno} AND B.DELETE_YN = 'N'
		<if test="keyword != null and !''.equals(keyword)">
			<if test="'title'.equals(status)">
			AND B.TITLE LIKE '%${keyword}%'
			</if>
			<if test="'content'.equals(status)">
			AND B.CONTENT LIKE '%${keyword}%'
			</if>
			<if test="'writer'.equals(status)">
			AND M.NICK LIKE '%${keyword}%'
			</if>
		</if>
		ORDER BY B.NO) A ORDER BY ROWNUM DESC
	</select>
	<insert id="boardWrite">
		INSERT INTO GROUP_BOARD
		VALUES (SEQ_GROUP_BOARD_NO.NEXTVAL, #{ctno}, #{mno}, #{title}, #{content}, SYSDATE, 'N', SYSDATE, 0)
	</insert>
	<select id="selectBoardDetail" resultType="map">
		SELECT B.NO, B.CATE_NO, M.NICK, B.TITLE, TO_CHAR(B.CONTENT) CONTENT , TO_CHAR(CAST(B.ENROLL_DATE as DATE),'YYYY.MM.DD') ENROLL_DATE, B.HIT
		FROM GROUP_BOARD B
		JOIN MEMBER M ON M.NO = B.WRITER
		WHERE B.NO = #{bno}
	</select>
	<update id="boardEdit">
		UPDATE GROUP_BOARD
		SET TITLE = #{title} , CONTENT = #{content}
		WHERE NO = #{bno}
	</update>
	<update id="boardDelete">
		UPDATE GROUP_BOARD
		SET DELETE_YN = 'Y'
		WHERE NO = #{bno}
	</update>
	<update id="updateBoardHit">
		UPDATE GROUP_BOARD
		SET HIT = HIT + 1
		WHERE NO = #{bno}
	</update>
	<select id="selectBoardCnt" resultType="int">
		SELECT COUNT(*)
		FROM GROUP_BOARD B
		JOIN GROUP_BOARD_CATEGORY C ON B.CATE_NO = C.NO
		JOIN MEMBER M ON M.NO = B.WRITER
		WHERE B.CATE_NO = #{ctno} AND B.DELETE_YN = 'N'
		<if test="keyword != null and !''.equals(keyword)">
			<if test="'title'.equals(status)">
			AND B.TITLE LIKE '%${keyword}%'
			</if>
			<if test="'content'.equals(status)">
			AND B.CONTENT LIKE '%${keyword}%'
			</if>
			<if test="'writer'.equals(status)">
			AND M.NICK LIKE '%${keyword}%'
			</if>
		</if>
		ORDER BY B.NO
	</select>
	<update id="deleteMystudyCategory">
		UPDATE GROUP_BOARD_CATEGORY SET
		DELETE_YN = 'Y'
		WHERE NO = #{ctno}
	</update>
	<insert id="insertMystudyCategory">
		INSERT INTO GROUP_BOARD_CATEGORY
		VALUES (SEQ_GROUP_BOARD_CATEGORY_NO.NEXTVAL, #{gno}, #{cateName}, 'N')
	</insert>
</mapper>