<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="studyMapper">
	<insert id="insertGroupInfo">
		INSERT INTO RECRUIT_GROUP
		(
			NO
			, WRITER
			, G_TYPE_NO
			, G_WAY_NO
			, G_PERIOD_NO
			, NUMBER_PEOPLE
			, TECH_STACK_NO
			, START_DATE
			, START_TIME
			, END_TIME
			, TITLE
			, INTRO
			, PLACE
			, ADDRESS
			, HIT
			, NAME
			, IMG_PATH
			, CLOSING_YN
			, DELETE_YN
			, MODIFY_DATE
			, ENROLL_DATE
		)
		VALUES
		(
			SEQ_RECRUIT_GROUP_NO.NEXTVAL
			, #{writer}
			, #{gTypeNo}
			, #{gWayNo}
			, #{gPeriodNo}
			, #{numberPeople}
			, #{techStackNoList}
			, #{startDate}
			, #{startTime}
			, #{endTime}
			, #{title}
			, #{intro}
			, #{place}
			, #{address}
			, '0'
			, '${writerNick}님의 스터디'
			, null
			, 'N'
			, 'N'
			, SYSDATE
			, SYSDATE

		)
	</insert>
	<insert id="insertGroupQuestion">
		INSERT INTO RECRUIT_QUESTION (NO, G_NO, QUESTION, DELETE_YN, MODIFY_DATE)
		    SELECT SEQ_RECRUIT_QUESTION_NO.NEXTVAL, A, B, C, D FROM 
		    (
		    <foreach collection="array" item="arr" separator="UNION ALL">
		    	SELECT (SELECT NO FROM RECRUIT_GROUP ORDER BY NO DESC OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY) AS A, #{arr} AS B,'N' AS C,SYSDATE AS D FROM DUAL
		    </foreach>
		    )
	</insert>
	
	<insert id="insertGroupTechStack">
		INSERT INTO GROUP_TECH_STACK (G_NO, TECH_STACK_NO)
		    SELECT A, B FROM 
		    (
		    <foreach collection="array" item="arr" separator="UNION ALL">
		    	SELECT (SELECT NO FROM RECRUIT_GROUP ORDER BY NO DESC OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY) AS A, #{arr} AS B FROM DUAL
		    </foreach>
		    )
	</insert>
	
	<insert id="insertCommonTag">
		INSERT INTO TAG (NO, NAME)
			SELECT SEQ_TAG_NO.NEXTVAL, A FROM
		    (
		    <foreach collection="array" item="arr" separator="UNION ALL">
		    	SELECT #{arr} AS A FROM DUAL WHERE NOT EXISTS (SELECT NAME FROM TAG WHERE NAME = #{arr})
		    </foreach>
		    )
	</insert>
	
	<insert id="insertGroupTag">
		INSERT INTO GROUP_TAG (GROUP_NO, TAG_NO)
			SELECT (SELECT NO FROM RECRUIT_GROUP ORDER BY NO DESC OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY), A FROM
		    (
		    <foreach collection="array" item="arr" separator="UNION ALL">
		    	SELECT (SELECT NO FROM TAG WHERE NAME = #{arr}) AS A FROM DUAL
		    </foreach>
		    )
	</insert>
	
	<select id="selectMyGroupList" resultType="map">
		SELECT G.NO, G.DELETE_YN, G.NAME, G.IMG_PATH, L.STATUS
		FROM RECRUIT_LIST L
		JOIN RECRUIT_GROUP G ON L.G_NO = G.NO
		WHERE L.M_NO = #{no} 
		AND G.DELETE_YN = 'N'
		AND (L.STATUS IN ('B', 'C'))
	</select>
	
	<select id="selectPopularTagList" resultType="map">
		SELECT T.NO, T.NAME, COUNT(T.NO) CNT
		FROM GROUP_TAG G
		JOIN TAG T ON G.TAG_NO = T.NO
		GROUP BY (T.NO, T.NAME)
		ORDER BY CNT DESC FETCH NEXT 10 ROWS ONLY
	</select>
	
	<select id="selectPopularTechStackList" resultType="map">
		SELECT T.NO, T.NAME, T.IMG_PATH, COUNT(T.NO) CNT
		FROM GROUP_TECH_STACK G
		JOIN TECH_STACK T ON G.TECH_STACK_NO = T.NO
		GROUP BY (T.NO, T.NAME, T.IMG_PATH)
		ORDER BY CNT DESC FETCH NEXT 10 ROWS ONLY
	</select>
	
	<select id="selectGroupTypeList" resultType="map">
		SELECT NO, NAME
		FROM GROUP_TYPE
	</select>
	
	<select id="selectGroupPeriodList" resultType="map">
		SELECT NO, NAME
		FROM GROUP_PERIOD
	</select>
	
	<select id="selectTechStackList" resultType="map">
		SELECT NO, NAME
		FROM TECH_STACK
	</select>
	
	<select id="selectTechStackListByType" resultType="map">
		<choose>
		    <when test="type.equals('인기')">
		      	SELECT T.NO, T.NAME, T.IMG_PATH, COUNT(T.NO) CNT
				FROM GROUP_TECH_STACK G
				JOIN TECH_STACK T ON G.TECH_STACK_NO = T.NO
				GROUP BY (T.NO, T.NAME, T.IMG_PATH)
				ORDER BY CNT DESC FETCH NEXT 10 ROWS ONLY
		    </when>
		    <when test="type.equals('모두보기')">
		        SELECT NO, NAME, IMG_PATH
				FROM TECH_STACK
		    </when>
		    <otherwise>
		      	SELECT A.NO, A.TYPE_NO, A.NAME, A.IMG_PATH, B.NAME
				FROM TECH_STACK A
				JOIN TECH_STACK_TYPE B ON A.TYPE_NO = B.NO
				WHERE B.NAME = #{type}
				ORDER BY A.NO
		    </otherwise>
		</choose>
	</select>
	
	<select id="selectGroupList" resultType="map">
		SELECT DISTINCT(G.NO), TO_CHAR(CAST(START_DATE as DATE),'YYYY.MM.DD') START_DATE, TITLE, TO_CHAR(G.INTRO), HIT, T.NAME TYPE, W.NAME WAY, NUMBER_PEOPLE, P.NAME PERIOD, M.NICK, M.IMG_PATH, G.ENROLL_DATE, G.CLOSING_YN, NVL(CMT_CNT,0) CMT_CNT , NVL(SCRAP_CNT,0) SCRAP_CNT, NVL(LIKES-HATES,0) LIKE_CNT
		FROM RECRUIT_GROUP G
		JOIN GROUP_TYPE T ON G.G_TYPE_NO = T.NO
		JOIN GROUP_WAY W ON G.G_WAY_NO = W.NO
		JOIN GROUP_PERIOD P ON G.G_PERIOD_NO = P.NO
		JOIN MEMBER M ON G.WRITER = M.NO
		LEFT JOIN (SELECT G_NO, COUNT(*) CMT_CNT FROM GROUP_CMT WHERE DELETE_YN = 'N' GROUP BY G_NO) C ON C.G_NO = G.NO
		LEFT JOIN (SELECT G_NO, COUNT(*) SCRAP_CNT FROM GROUP_SCRAP GROUP BY G_NO) S ON S.G_NO = G.NO
		LEFT JOIN ( SELECT  G_NO, SUM(CASE WHEN STATUS = 'L' THEN 1 ELSE 0 END) AS LIKES, SUM(CASE WHEN STATUS = 'H' THEN 1 ELSE 0 END) AS HATES
		        FROM GROUP_LIKE_HATE
		        GROUP BY G_NO) L ON L.G_NO = G.NO
		WHERE G.DELETE_YN = 'N' 	
		<if test="gno != null">AND G.NO = 1</if>
		<if test="keyword != null">AND G.TITLE LIKE ('%${keyword}%') AND G.INTRO LIKE ('%${keyword}%')</if>
		<if test="type != '전체'">AND T.NAME = #{type}</if>
		<if test="status != null">AND G.CLOSING_YN IN ('N')</if>
		<if test="tag != null">
			AND G.NO IN (SELECT GROUP_NO
			FROM GROUP_TAG G
			JOIN TAG T ON G.TAG_NO = T.NO
			WHERE T.NAME IN 
			<foreach item="item" index="index" collection="tag"
			    open="(" separator="," close=")">
			      #{item}
			</foreach>
			)
		</if>
		<if test="techStack != null">
			AND G.NO IN (SELECT G_NO
			FROM GROUP_TECH_STACK G
			JOIN TECH_STACK T ON G.TECH_STACK_NO = T.NO
			WHERE T.NAME IN 
				<foreach item="item" index="index" collection="techStack"
			    	open="(" separator="," close=")">
			      	#{item}
				</foreach>
			)
		</if>
		<if test="'recent'.equals(order)">ORDER BY ENROLL_DATE DESC</if>
		<if test="'hit'.equals(order)">ORDER BY G.HIT DESC</if>
		<if test="'recommend'.equals(order)">ORDER BY LIKE_CNT DESC</if>
		<if test="'scrap'.equals(order)">ORDER BY SCRAP_CNT DESC</if>
		<if test="'comment'.equals(order)">ORDER BY CMT_CNT DESC</if>
	</select>
	
	<select id="selectTechStackListByGno" resultType="map">
		SELECT T.NO, T.NAME, T.IMG_PATH
		FROM GROUP_TECH_STACK G
		JOIN TECH_STACK T ON G.TECH_STACK_NO = T.NO
		WHERE G_NO = #{gno}
	</select>
	
	<select id="selectScrapCntByGno" resultType="map">
		SELECT COUNT(*) CNT
		FROM GROUP_SCRAP
		WHERE G_NO = #{gno}
	</select>
	
	<select id="selectCmtCntByGno" resultType="map">
		SELECT COUNT(*) CNT
		FROM GROUP_CMT
		WHERE G_NO = #{gno}
		AND DELETE_YN = 'N'
	</select>
	
	<select id="selectlikeHateCntByGno" resultType="map">
		SELECT 
		(SELECT COUNT(*)
		FROM GROUP_LIKE_HATE
		WHERE G_NO = #{gno}
		AND STATUS = 'L') 
		- 
		(SELECT COUNT(*)
		FROM GROUP_LIKE_HATE
		WHERE G_NO = #{gno}
		AND STATUS = 'H') AS CNT
		FROM DUAL
	</select>
	<select id="selectGroupOneByGno" resultType="map">
		SELECT DISTINCT(G.NO), START_TIME, END_TIME,PLACE, ADDRESS, TO_CHAR(CAST(START_DATE as DATE),'YYYY.MM.DD') START_DATE, TITLE, TO_CHAR(G.INTRO) INTRO, HIT, T.NAME TYPE, W.NAME WAY, NUMBER_PEOPLE, P.NAME PERIOD, M.NICK, M.IMG_PATH, TO_CHAR(CAST(G.ENROLL_DATE as DATE),'YYYY.MM.DD HH24:MI') ENROLL_DATE, G.CLOSING_YN, NVL(CMT_CNT,0) CMT_CNT , NVL(SCRAP_CNT,0) SCRAP_CNT, NVL(LIKES-HATES,0) LIKE_CNT
		FROM RECRUIT_GROUP G
		JOIN GROUP_TYPE T ON G.G_TYPE_NO = T.NO
		JOIN GROUP_WAY W ON G.G_WAY_NO = W.NO
		JOIN GROUP_PERIOD P ON G.G_PERIOD_NO = P.NO
		JOIN MEMBER M ON G.WRITER = M.NO
		LEFT JOIN (SELECT G_NO, COUNT(*) CMT_CNT FROM GROUP_CMT WHERE DELETE_YN = 'N' GROUP BY G_NO) C ON C.G_NO = G.NO
		LEFT JOIN (SELECT G_NO, COUNT(*) SCRAP_CNT FROM GROUP_SCRAP GROUP BY G_NO) S ON S.G_NO = G.NO
		LEFT JOIN ( SELECT  G_NO, SUM(CASE WHEN STATUS = 'L' THEN 1 ELSE 0 END) AS LIKES, SUM(CASE WHEN STATUS = 'H' THEN 1 ELSE 0 END) AS HATES
		        FROM GROUP_LIKE_HATE
		        GROUP BY G_NO) L ON L.G_NO = G.NO
		WHERE G.DELETE_YN = 'N' 
		AND G.NO = #{gno}
	</select>
	<select id="selectQuestionListByGno" resultType="map">
		SELECT QUESTION
		FROM RECRUIT_QUESTION
		WHERE G_NO = #{gno}
		AND DELETE_YN = 'N'
		ORDER BY NO
	</select>
	<select id="selectTagListByGno" resultType="map">
		SELECT NAME
		FROM GROUP_TAG G
		JOIN TAG T ON G.TAG_NO = T.NO
		WHERE G.GROUP_NO = #{gno}
	</select>
	<select id="selectMemberListByGno" resultType="map">
		SELECT M.NICK, M.IMG_PATH, L.STATUS
		FROM RECRUIT_LIST L
		JOIN MEMBER M ON L.M_NO = M.NO
		WHERE L.G_NO = 1
		AND L.M_NO IN ('B','C')
	</select>
	<update id="updateHit">
		UPDATE RECRUIT_GROUP
		SET HIT = HIT + 1
		WHERE NO = #{gno}
	</update>
	<insert id="insertWriter">
		INSERT INTO RECRUIT_LIST
		(NO, G_NO, M_NO, ENROLL_DATE, STATUS)
		VALUES 
		(SEQ_RECRUIT_LIST_NO.NEXTVAL, (SELECT NO FROM RECRUIT_GROUP ORDER BY NO DESC OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY), #{writer}, SYSDATE, 'B')
	</insert>

</mapper>